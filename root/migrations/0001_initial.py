# Generated by Django 4.0.1 on 2022-02-14 14:01

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import utils.py.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('date_joined', models.DateField(auto_created=True, auto_now_add=True, verbose_name='Date Joined')),
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(help_text='Username of the user, to be chosen by the user themselves and should be unique.', max_length=64, unique=True, verbose_name='User Name')),
                ('first_name', models.CharField(max_length=64, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Last Name')),
                ('email_id', models.EmailField(help_text='Email ID of the user, must be unique (only 1 account with an email id)', max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Invalid email_id')], verbose_name='Email ID')),
                ('user_type', models.CharField(choices=[('s', 'Student'), ('t', 'Teacher'), ('p', 'Parent'), ('m', 'Management'), ('a', 'Administrator')], help_text='Designation/Department/Type of user', max_length=5, verbose_name='User Type')),
                ('date_of_birth', models.DateField(verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('m', 'Male'), ('f', 'Female'), ('o', 'Other')], max_length=5, verbose_name='Gender')),
                ('contact_no', models.CharField(help_text='Contact No. of the user. Must be entered in the format: "+999999999999" (with country code). Up to 15 digits allowed', max_length=17, validators=[django.core.validators.RegexValidator(message='Contact No. must be entered in the format: "+999999999999" (with country code). Up to 15 digits allowed', regex='^\\+[0-9]{5,14}$')], verbose_name='Contact No.')),
                ('address', models.TextField(blank=True, max_length=1024, null=True, verbose_name='Address')),
                ('last_login_ip_address', models.GenericIPAddressField(blank=True, default=None, null=True, verbose_name='Last Login IP Address')),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileAssets',
            fields=[
                ('uploaded_at', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Uploaded at')),
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=utils.py.utils.get_asset_directory_path, verbose_name='File')),
            ],
        ),
        migrations.CreateModel(
            name='ImageAssets',
            fields=[
                ('uploaded_at', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Uploaded at')),
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=utils.py.utils.get_asset_directory_path, verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='Management',
            fields=[
                ('management', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='management', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('role', models.CharField(max_length=255, verbose_name='Role')),
                ('year_of_joining', models.IntegerField(verbose_name='Year of Joining')),
                ('salary', models.IntegerField(verbose_name='Salary')),
            ],
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('parent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='parent', serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='avatar',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='root.imageassets'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('teacher', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='teacher', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('year_of_joining', models.IntegerField(verbose_name='Year of Joining')),
                ('salary', models.IntegerField(verbose_name='Salary')),
                ('classes', models.ManyToManyField(related_name='teacher_set', to='api.Class')),
                ('owns_class', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacher', to='api.class')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacher_set', to='api.subject')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='student', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('roll_no', models.IntegerField(verbose_name='Roll Number')),
                ('year_of_enroll', models.SmallIntegerField(verbose_name='Year of Enroll')),
                ('fee', models.IntegerField(verbose_name='Fee')),
                ('grade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_set', to='api.class')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_set', to='root.parent')),
            ],
        ),
    ]
