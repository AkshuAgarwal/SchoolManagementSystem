"""
Django settings for SchoolManagementSystem project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv


load_dotenv("./.env")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

_TEMP_DIR = BASE_DIR / "tmp"
_LOGS_DIR = _TEMP_DIR / "logs"
_TEMPLATES_DIR = BASE_DIR / "templates"
_CACHE_DIR = _TEMP_DIR / "cache"
_TEMP_FILES_DIR = _TEMP_DIR / "temp_files"
_FILES_DIR = BASE_DIR / "files"
_EMAIL_FILES_DIR = _FILES_DIR / "email_files"
_STATIC_FILES_DIR = BASE_DIR / "static"
_MEDIA_FILES_DIR = BASE_DIR / "uploads"

# Creating required directories
_TEMP_DIR.mkdir(exist_ok=True)
_LOGS_DIR.mkdir(exist_ok=True)
_TEMPLATES_DIR.mkdir(exist_ok=True)
_CACHE_DIR.mkdir(exist_ok=True)
_TEMP_FILES_DIR.mkdir(exist_ok=True)
_FILES_DIR.mkdir(exist_ok=True)
_EMAIL_FILES_DIR.mkdir(exist_ok=True)
_STATIC_FILES_DIR.mkdir(exist_ok=True)
_MEDIA_FILES_DIR.mkdir(exist_ok=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ["DEBUG"] == "True"

ALLOWED_HOSTS = os.environ["ALLOWED_HOSTS"].split(",")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "root.apps.RootConfig",
    "authentication.apps.AuthenticationConfig",
    # "api.apps.ApiConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "SchoolManagementSystem.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            _TEMPLATES_DIR,
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "SchoolManagementSystem.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "USER": os.environ["DB_USER"],
        "PASSWORD": os.environ["DB_PASS"],
        "HOST": os.environ["DB_HOST"],
        "PORT": int(os.environ["DB_PORT"]),
        "NAME": os.environ["DB_NAME"],
        "TIME_ZONE": os.environ["TIME_ZONE"],
        "TEST": {
            "NAME": os.environ["TEST_DB_NAME"],
        },
    },
}


# Caching

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": _CACHE_DIR,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

PASSWORD_RESET_TIMEOUT = 600


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

USE_I18N = False

USE_L10N = True

USE_TZ = True

TIME_ZONE = os.environ["TIME_ZONE"]

# fmt: off
DATE_INPUT_FORMATS = [
    "%d-%m-%Y",     # '25-10-2006'
    "%d/%m/%Y",     # '25/10/2006'
    "%b %d %Y",     # 'Oct 25 2006'
    "%b %d, %Y",    # 'Oct 25, 2006'
    "%d %b %Y",     # '25 Oct 2006'
    "%d %b, %Y",    # '25 Oct, 2006'
    "%B %d %Y",     # 'October 25 2006'
    "%B %d, %Y",    # 'October 25, 2006'
    "%d %B %Y",     # '25 October 2006'
    "%d %B, %Y",    # '25 October, 2006'
]
# fmt: on


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    _STATIC_FILES_DIR,
]


# Media Settings
# https://docs.djangoproject.com/en/3.2/topics/files/

MEDIA_ROOT = _MEDIA_FILES_DIR
MEDIA_URL = "/media/"

FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.FileUploadHandler",
    "django.core.files.uploadhandler.MemoryFileUploadHandler",
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]

FILE_UPLOAD_TEMP_DIR = _TEMP_FILES_DIR


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


# User Model
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-user-model

AUTH_USER_MODEL = "root.User"


# SMTP Configuration
# https://docs.djangoproject.com/en/3.2/topics/email/

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
DEFAULT_FROM_EMAIL = os.environ["EMAIL_FROM"]
EMAIL_FILE_PATH = _EMAIL_FILES_DIR

SERVER_EMAIL = os.environ["SERVER_EMAIL"]

_service = os.environ["EMAIL_SERVICE"]
if _service == "localhost":
    EMAIL_HOST = os.environ["EMAIL_HOST"]
    EMAIL_PORT = int(os.environ["EMAIL_PORT"])
elif _service == "gmail":
    EMAIL_HOST = "smtp.gmail.com"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
elif _service == "outlook":
    EMAIL_HOST = "smtp-mail.outlook.com"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
elif _service == "yahoo":
    EMAIL_HOST = "smtp.mail.yahoo.com"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
elif _service == "icloud":
    EMAIL_HOST = "smtp.mail.me.com"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True

EMAIL_HOST_USER = os.environ["EMAIL_HOST_USER"]
EMAIL_HOST_PASSWORD = os.environ["EMAIL_HOST_PASSWORD"]
EMAIL_SUBJECT_PREFIX = os.environ["EMAIL_SUBJECT_PREFIX"]
EMAIL_USE_LOCALTIME = True

ADMINS = [(os.environ["ROOT_ADMIN_NAME"], os.environ["ROOT_ADMIN_EMAIL_ID"])]
MANAGERS = [(os.environ["MANAGER_NAME"], os.environ["MANAGER_EMAIL_ID"])]


# Cors Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

CORS_ALLOW_CREDENTIALS = True


# CSRF Configuration
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_NAME = "X-CSRF-Token"
CSRF_COOKIE_SAMESITE = "Strict"


# RestFramework Configuration
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "authentication.authentication.Authentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # Test Settings
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "TEST_REQUEST_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    # Encodings
    "UNICODE_JSON": False,
    "COERCE_DECIMAL_TO_STRING": False,
}


# Simple JWT Configuration
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(hours=1),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    # custom
    "AUTH_COOKIE": "X-Authorization-Token",  # Cookie name. Enables cookies if value is set.
    "AUTH_COOKIE_DOMAIN": None,  # A string like "example.com", or None for standard domain cookie.
    "AUTH_COOKIE_SECURE": False,  # Whether the auth cookies should be secure (https:// only).
    "AUTH_COOKIE_HTTP_ONLY": True,  # Http only cookie flag. It's not fetch by javascript.
    "AUTH_COOKIE_PATH": "/",  # The path of the auth cookie.
    "AUTH_COOKIE_SAMESITE": "Strict",  # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag.
    "REFRESH_COOKIE": "X-Refresh-Token",
    "REFRESH_COOKIE_DOMAIN": None,
    "REFRESH_COOKIE_SECURE": False,
    "REFRESH_COOKIE_HTTP_ONLY": True,
    "REFRESH_COOKIE_PATH": "/",
    "REFRESH_COOKIE_SAMESITE": "Strict",
}


# Logging Configuration
# https://docs.djangoproject.com/en/3.2/topics/logging/

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "general": {
            "format": "[{asctime}] [{levelname:<7}] [{name} - {filename}:{lineno}]: {message} (EXCEPTION: {exc_info})",
            "datefmt": "%d/%b/%Y %H:%M:%S",
            "style": "{",
        },
        "request": {
            "format": "[{asctime}] [{levelname:<7}] [{name} - {filename}:{lineno}]: {message} (STATUS: {status_code}; REQUEST: {request}; EXCEPTION: {exc_info}",
            "datefmt": "%d/%b/%Y %H:%M:%S",
            "style": "{",
        },
        "db": {
            "format": "[{asctime}] [{levelname:<7}] [{name} - {filename}:{lineno}]: {message} (SQL: {sql}; PARAMS: {params}; EXCEPTION: {exc_info})",
            "datefmt": "%d/%b/%Y %H:%M:%S",
            "style": "{",
        },
    },
    "handlers": {
        "null": {
            "class": "logging.NullHandler",
        },
        "console": {
            "class": "logging.StreamHandler",
            "filters": ["require_debug_true"],
            "formatter": "general",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
        "django": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": _LOGS_DIR / "django.log",
            "maxBytes": 16 * 1024 * 1024,  # 16 MB
            "backupCount": 5,
            "formatter": "general",
        },
        "security": {
            "level": "WARNING",
            # "filters": ["require_debug_false"],
            "class": "logging.handlers.RotatingFileHandler",
            "filename": _LOGS_DIR / "security.log",
            "maxBytes": 16 * 1024 * 1024,  # 16 MB
            "backupCount": 5,
            "formatter": "general",
        },
        "db": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": _LOGS_DIR / "db.log",
            "maxBytes": 16 * 1024 * 1024,  # 16 MB
            "backupCount": 5,
            "formatter": "db",
        },
        "db_debug": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": _LOGS_DIR / "db_debug.log",
            "maxBytes": 256 * 1024 * 1024,  # 256 MB
            "backupCount": 5,
            "formatter": "db",
            "filters": ["require_debug_true"],
        },
        "request": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": _LOGS_DIR / "request.log",
            "maxBytes": 16 * 1024 * 1024,  # 16 MB
            "backupCount": 5,
            "formatter": "request",
        },
        "request_all": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": _LOGS_DIR / "request_all.log",
            "maxBytes": 256 * 1024 * 1024,  # 256 MB
            "backupCount": 5,
            "formatter": "request",
            "filters": ["require_debug_true"],
        },
        "celery": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": _LOGS_DIR / "celery.log",
            "maxBytes": 16 * 1024 * 1024,  # 16 MB
            "backupCount": 5,
            "formatter": "general",
        },
        "delayed_tasks": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": _LOGS_DIR / "delayed_tasks.log",
            "maxBytes": 16 * 1024 * 1024,  # 16 MB
            "backupCount": 5,
            "formatter": "general",
        },
        "apps": {
            "level": "WARNING",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": _LOGS_DIR / "apps.log",
            "maxBytes": 16 * 1024 * 1024,  # 16 MB
            "backupCount": 5,
            "formatter": "general",
        },
        "api": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": _LOGS_DIR / "api.log",
            "maxBytes": 16 * 1024 * 1024,  # 16 MB
            "backupCount": 5,
            "formatter": "general",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["django"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["request", "mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["request_all"],
            "level": "INFO",
        },
        "django.security": {
            "handlers": ["security", "mail_admins"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["db", "mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["db_debug"],
            "level": "DEBUG",
        },
        "celery": {
            "handlers": ["celery"],
            "level": "ERROR",
        },
        "celery.task": {
            "handlers": ["delayed_tasks"],
            "level": "INFO",
        },
        "apps": {
            "handlers": ["apps"],
            "level": "WARNING",
        },
        "common": {
            "handlers": ["apps"],
            "level": "WARNING",
        },
        "api": {
            "handlers": ["api"],
            "level": "ERROR",
        },
        "py.warnings": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "": {
            "handlers": ["console"],
            "level": "CRITICAL",
        },
    },
}
