"""
Django settings for School Management System project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import json
import yaml
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta


load_dotenv("./.env")
with open("./constants.json") as f:
    _CONSTANTS = json.load(f)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

_TEMP_DIR = BASE_DIR / "tmp"
_TEMPLATES_DIR = BASE_DIR / "templates"
_LOGS_DIR = _TEMP_DIR / "logs"
_TEMP_FILES_DIR = _TEMP_DIR / "files"
_MEDIA_FILES_DIR = BASE_DIR / "uploads"

_TEMP_DIR.mkdir(exist_ok=True)
_TEMPLATES_DIR.mkdir(exist_ok=True)
_LOGS_DIR.mkdir(exist_ok=True)
_TEMP_FILES_DIR.mkdir(exist_ok=True)
_MEDIA_FILES_DIR.mkdir(exist_ok=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ["PRODUCTION"].lower() == "false"

ALLOWED_HOSTS = os.environ["ALLOWED_HOSTS"].split(",")


# Cannot make migrations while setting up a fresh database.
# Not sure how to fix it, but the error is irrelevant.
# So, I think we need to just suppress it for now.
SILENCED_SYSTEM_CHECKS = ["fields.E300", "fields.E307"]


# Application definition

INSTALLED_APPS = [
    "overwrites.apps.OverwritesConfig",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "root.apps.RootConfig",
    "authentication.apps.AuthenticationConfig",
    "api.apps.ApiConfig",
    "admin.apps.AdminConfig",
]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "authentication.backend.AuthenticationBackend",
]

ROOT_URLCONF = "core.urls"

WSGI_APPLICATION = "core.wsgi.application"


# Templates
# https://docs.djangoproject.com/en/4.0/topics/templates/

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            _TEMPLATES_DIR,
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if os.environ["DB_ENGINE"] == "postgresql":
    _DB_ENGINE = "django.db.backends.postgresql_psycopg2"
elif os.environ["DB_ENGINE"] == "mysql":
    _DB_ENGINE = "django.db.backends.mysql"

DATABASES = {
    "default": {
        "ENGINE": _DB_ENGINE,
        "USER": os.environ["DB_USER"],
        "PASSWORD": os.environ["DB_PASS"],
        "HOST": os.environ["DB_HOST"],
        "PORT": int(os.environ["DB_PORT"]),
        "NAME": os.environ["DB_NAME"],
        "TIME_ZONE": _CONSTANTS["TIME_ZONE"],
    },
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        "OPTIONS": {
            "max_similarity": 0.7,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "root.validators.RequiredPasswordCharactersValidator",
        "OPTIONS": {
            "required_chars": {
                "ascii_lowercase": {"minimum_length": 1},
                "ascii_uppercase": {"minimum_length": 1},
                "digits": {"minimum_length": 1},
                "punctuation": {"minimum_length": 1},
            },
        },
    },
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

PASSWORD_RESET_TIMEOUT = _CONSTANTS["PASSWORD_RESET_TIMEOUT"]


# Email
# https://docs.djangoproject.com/en/4.0/topics/email/

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = os.environ["EMAIL_CONNECTION"].lower() == "tls"
EMAIL_USE_SSL = os.environ["EMAIL_CONNECTION"].lower() == "ssl"

DEFAULT_FROM_EMAIL = os.environ["FROM_EMAIL"]

EMAIL_HOST = os.environ["EMAIL_HOST"]
EMAIL_PORT = int(os.environ["EMAIL_PORT"])
EMAIL_HOST_USER = os.environ["EMAIL_HOST_USER"]
EMAIL_HOST_PASSWORD = os.environ["EMAIL_HOST_PASSWORD"]
EMAIL_SUBJECT_PREFIX = os.environ["EMAIL_SUBJECT_PREFIX"]
EMAIL_USE_LOCALTIME = True


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

USE_I18N = False

USE_L10N = False

USE_TZ = True
TIME_ZONE = _CONSTANTS["TIME_ZONE"]

# fmt: off
DATE_INPUT_FORMATS = [
    "%d-%m-%Y",     # '25-10-2006'
    "%d/%m/%Y",     # '25/10/2006'
    "%b %d %Y",     # 'Oct 25 2006'
    "%b %d, %Y",    # 'Oct 25, 2006'
    "%d %b %Y",     # '25 Oct 2006'
    "%d %b, %Y",    # '25 Oct, 2006'
    "%B %d %Y",     # 'October 25 2006'
    "%B %d, %Y",    # 'October 25, 2006'
    "%d %B %Y",     # '25 October 2006'
    "%d %B, %Y",    # '25 October, 2006'
]
# fmt: on


# Media Settings
# https://docs.djangoproject.com/en/3.2/topics/files/

MEDIA_ROOT = _MEDIA_FILES_DIR
MEDIA_URL = "/media/"

FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.FileUploadHandler",
    "django.core.files.uploadhandler.MemoryFileUploadHandler",
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]

FILE_UPLOAD_TEMP_DIR = _TEMP_FILES_DIR


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


# User Model
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-user-model

AUTH_USER_MODEL = "root.User"


# Cors Configuration
CORS_ALLOWED_ORIGINS = os.environ["CORS_ALLOWED_ORIGINS"].split(",")
CORS_ALLOW_CREDENTIALS = True


# CSRF Configuration
CSRF_TRUSTED_ORIGINS = os.environ["CSRF_TRUSTED_ORIGINS"].split(",")
CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_PATH = "/"
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = "None"
CSRF_COOKIE_SECURE = True


# Logging
with open("logging.yaml", "r") as stream:
    _data = stream.read()
    _data = _data.format(LOGS_DIR=_LOGS_DIR.as_posix())

LOGGING = yaml.load(_data, Loader=yaml.FullLoader)


# RestFramework Configuration
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework_orjson.renderers.ORJSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework_orjson.parsers.ORJSONParser",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "authentication.authentication.Authentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # Test Settings
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "TEST_REQUEST_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    # Encodings
    "UNICODE_JSON": False,
    "COERCE_DECIMAL_TO_STRING": False,
    # Other
    "UPLOADED_FILES_USE_URL": True,
}


# Simple JWT Configuration
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(hours=1),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    # custom
    "AUTH_COOKIE": "X-Authorization-Token",  # Cookie name. Enables cookies if value is set.
    "AUTH_COOKIE_DOMAIN": None,  # A string like "example.com", or None for standard domain cookie.
    "AUTH_COOKIE_SECURE": True,  # Whether the auth cookies should be secure (https:// only).
    "AUTH_COOKIE_HTTP_ONLY": True,  # Http only cookie flag. It's not fetch by javascript.
    "AUTH_COOKIE_PATH": "/",  # The path of the auth cookie.
    "AUTH_COOKIE_SAMESITE": "None",  # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or 'None' to disable the flag; or None (python) to use the default (Lax)
    "REFRESH_COOKIE": "X-Refresh-Token",
    "REFRESH_COOKIE_DOMAIN": None,
    "REFRESH_COOKIE_SECURE": True,
    "REFRESH_COOKIE_HTTP_ONLY": True,
    "REFRESH_COOKIE_PATH": "/",
    "REFRESH_COOKIE_SAMESITE": "None",
}
