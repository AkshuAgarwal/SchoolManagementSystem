from django.db import models
from django.contrib.auth.models import AbstractBaseUser as _ABU, PermissionsMixin as _PM
from django.core.validators import RegexValidator
from django.utils.translation import gettext_lazy as _

from .managers import UserManager, AuthorizationManager


class UserModel(_ABU, _PM):
    id = models.BigAutoField(
        verbose_name=_("ID"),
        auto_created=True,
        primary_key=True,
        serialize=False,
    )
    username = models.CharField(
        verbose_name=_("User Name"),
        unique=True,
        max_length=64,
        help_text=_("Username of the user, to be chosen by the user themselves and should be unique."),
    )
    first_name = models.CharField(
        verbose_name=_("First Name"),
        max_length=64,
        help_text=_("First Name of the user"),
    )
    last_name = models.CharField(
        verbose_name=_("Last Name"),
        max_length=64,
        null=True,
        blank=True,
        help_text=_("Last Name of the user"),
    )
    email_id = models.EmailField(
        verbose_name=_("Email ID"),
        unique=True,
        help_text=_("Email ID of the user, must be unique (only 1 account with an email id)"),
    )
    user_type = models.CharField(
        verbose_name=_("User Type"),
        max_length=2,
        choices=[
            ("s", _("Student")),
            ("t", _("Teacher")),
            ("p", _("Parent")),
            ("m", _("Management")),
            ("a", _("Administrator")),
        ],
        help_text=_("Designation/Department/Type of user"),
    )
    date_of_birth = models.DateField(
        verbose_name=_("Date of Birth"),
        auto_now=False,
        auto_now_add=False,
        help_text=_("Date of Birth of the user"),
    )
    contact_no = models.CharField(
        verbose_name=_("Contact No."),
        validators=[
            RegexValidator(
                regex=r"^\+[0-9]{5,14}$",
                message=_(
                    'Contact No. must be entered in the format: "+999999999999" (with country code). Up to 15 digits allowed'
                ),
            )
        ],
        max_length=17,
        help_text=_(
            'Contact No. of the user. Must be entered in the format: "+999999999999" (with country code). Up to 15 digits allowed'
        ),
    )
    address = models.TextField(
        verbose_name=_("Address"),
        max_length=1024,
        null=True,
        blank=True,
        help_text=_("Address of the user"),
    )

    creation_time = models.DateTimeField(
        verbose_name=_("Creation Time"),
        auto_now=False,
        auto_now_add=False,
        help_text=_("Account creation time, auto-generated by server"),
    )

    is_superuser = models.BooleanField(default=False)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)

    USERNAME_FIELD = "username"
    EMAIL_FIELD = "email_id"
    REQUIRED_FIELDS = [
        "first_name",
        "last_name",
        "email_id",
        "date_of_birth",
        "contact_no",
        "address",
    ]

    objects = UserManager()

    def __eq__(self, __o: object) -> bool:
        return isinstance(__o, UserModel) and self.id == __o.id

    def __ne__(self, __o: object) -> bool:
        if not isinstance(__o, UserModel):
            return True
        return self.id != __o.id

    def __repr__(self) -> str:
        return f"<User id={self.id} name={self.username} type={self.user_type}>"

    def __str__(self) -> str:
        return self.username

    def __int__(self) -> int:
        return int(self.id)

    def get_full_name(self) -> str:
        return self.first_name + " " + self.last_name

    def get_short_name(self) -> str:
        return self.first_name


class AuthorizationModel(models.Model):
    user = models.OneToOneField(
        UserModel,
        on_delete=models.CASCADE,
        verbose_name=_("User"),
        primary_key=True,
        to_field="username",
        db_column="username",
    )
    authorization_token = models.CharField(
        verbose_name=_("Authorization Token"),
        max_length=255,
        unique=True,
        serialize=False,
        help_text=_("Authorization Token of the user to interact with the API, auto-generated"),
    )
    ip_address = models.GenericIPAddressField(
        verbose_name=_("IP Address"),
        null=True,
        blank=True,
        help_text=_("IP Address from which the user last logged in"),
    )

    objects = AuthorizationManager()

    def __eq__(self, __o: object) -> bool:
        return isinstance(__o, AuthorizationModel) and self.user == __o.user

    def __ne__(self, __o: object) -> bool:
        if not isinstance(__o, AuthorizationModel):
            return True
        return self.user != __o.user

    def __repr__(self) -> str:
        return f"<Authorization User(id={self.user.id} name={self.user.username} type={self.user.user_type})>"
